package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private final JoinPredicate joinPredicate;
    private OpIterator rightChild;
    private OpIterator leftChild;
	private Tuple leftTuple;

	/**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
    	this.leftChild = child1;
    	this.rightChild = child2;
    	this.joinPredicate = p;
    }

    public JoinPredicate getJoinPredicate() {
        return joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return leftChild.getTupleDesc().getFieldName(joinPredicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
    	return rightChild.getTupleDesc().getFieldName(joinPredicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
    	return TupleDesc.merge(leftChild.getTupleDesc(), rightChild.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
    	this.leftChild.open();
    	this.rightChild.open();
    }

    public void close() {
        super.close();
        this.leftChild.close();
        this.rightChild.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
    	this.leftChild.rewind();
    	this.rightChild.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	if(this.leftTuple == null){
    		if(!leftChild.hasNext()) {
    			return null;
		    }
    		this.leftTuple = leftChild.next();
	    }
	    while(this.leftTuple != null) {
		    while (rightChild.hasNext()) {
			    final Tuple rightTuple = rightChild.next();
			    if (this.joinPredicate.filter(leftTuple, rightTuple)) {
				    final Tuple tuple = new Tuple(getTupleDesc());
				    int i = 0;
				    final Iterator<Field> fields = leftTuple.fields();
				    while (fields.hasNext()) {
					    tuple.setField(i++, fields.next());
				    }
				    final Iterator<Field> fields1 = rightTuple.fields();
				    while (fields1.hasNext()) {
					    tuple.setField(i++, fields1.next());
				    }
				    return tuple;
			    }
		    }
		    rightChild.rewind();
		    this.leftTuple = null;
		    if(this.leftChild.hasNext()){
		    	this.leftTuple = this.leftChild.next();
		    }
	    }
	    return null;
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[]{leftChild, rightChild};
    }

    @Override
    public void setChildren(OpIterator[] children) {
    	assert children.length == 2;
    	leftChild = children[0];
    	rightChild = children[1];
    }

}
